{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n    address[] public funders;\r\n\r\n      // Could we make this constant?  /* hint: no! We should make it immutable! */\r\n    address public /* immutable */ owner;\r\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;   // in ETH\r\n    uint256 public constant MINIMUM_EUR = 50 * 10 ** 18;\r\n  \r\n  \r\n\r\n    // 'priceFeed' et 'priceFeedEuroToUsd' sont variables et modularisés en fonction du type de blockchain (serviront désormais de 'PriceConverter')    \r\n    AggregatorV3Interface public priceFeed;    \r\n    //AggregatorV3Interface public priceFeedEuroToUsd;  \r\n\r\n    \r\n    // Lors du deploiement, passer coe argument l'adresse de prix en fucntion de la blockchain sur laquelle on opère Ethereum, BNB, Polygonlgon...Mainnet, rinkeby, Kovan etc...\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;  // the guy who is deploying the contract\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);  // ETH<=>USD // instead of 'priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e)' which is only for Rinkeby;\r\n        //priceFeedEuroToUsd = AggregatorV3Interface(priceFeedEuroToUsdAddress);  // Euro=>USD \r\n    }\r\n\r\n    // get the description of the contract\r\n    function getDescription() external view returns (string memory) {\r\n        return priceFeed.description();\r\n    }\r\n\r\n\r\n    function fund() public payable {\r\n        //getConversionRate(msg.value, priceFeed)\r\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"You need to spend more ETH!\");   // ConversionRate ds 'PriceConverter' aura désormais 2 paramètres: 'msg.value' et 'priceFeed'\r\n        //require(msg.value.getConversionRateInEuro(priceFeedEuroToUsd) >= MINIMUM_EUR, \"Not enough Eth to proceed !\");\r\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n        funders.push(msg.sender);\r\n    }\r\n\r\n    // function fundEuro() public payable {\r\n    //     require(msg.value.getConversionRateInEuro(priceFeedEuroToUsd) >= MINIMUM_EUR,  \"You probably need more ETH!\");\r\n    //     addressToAmountFunded[msg.sender] = addressToAmountFunded[msg.sender] + msg.value;\r\n    //     funders.push(msg.sender);     \r\n    // }\r\n     \r\n  \r\n    modifier onlyOwner {\r\n        // require(msg.sender == owner);\r\n        if (msg.sender != owner) revert NotOwner();\r\n        _;  // doing the rest of the code in the function which inherits the 'onlyOwner' modifier\r\n    }\r\n    \r\n    function withdraw() payable onlyOwner public {\r\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        // resetting our funders array with (0) funders inside...thus withdrawing the funds and restart funding with a completely blank array\r\n        funders = new address[](0);\r\n\r\n        /* \r\n        Pour retirer les fonds cotisés, il se présente 3 méthodes possibles: Par Transfert, Par Envoi, Par Call \r\n        remeber Transfer and Send methods are gas expensive 2300TH \r\n        faut pas oublier de convertir l'adresse 'msg.value' en adresse payable 'payable(msg.value)'.\r\n        */\r\n        // // transfer....throws an error if it fails\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n        // // send...returns a bool if it fails\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\");   // help revert the transaction if it fails\r\n        // call...can be used to call any function in ethereum without even have to have an ABI\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call failed\"); // revert if the 'call' fails\r\n    }\r\n    // Explainer from: https://solidity-by-example.org/fallback/\r\n    // Ether is sent to contract\r\n    //      is msg.data empty?\r\n    //          /   \\ \r\n    //         yes  no\r\n    //         /     \\\r\n    //    receive()?  fallback() \r\n    //     /   \\ \r\n    //   yes   no\r\n    //  /        \\\r\n    //receive()  fallback()\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n}\r\n\r\n// Concepts we didn't cover yet (will cover in later sections)\r\n// 1. Enum\r\n// 2. Events\r\n// 3. Try / Catch\r\n// 4. Function Selector\r\n// 5. abi.encode / decode\r\n// 6. Hash with keccak256\r\n// 7. Yul / Assembly\r\n\r\n\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// Why is this a library and not abstract?\r\n// Why not an interface?\r\nlibrary PriceConverter {\r\n    // price Of ETH In terms of USD......answer is in USD.....// ie : to buy 1eth , must spend 'answer' USD\r\n    // Donc 'answer' c'est le nombre de $USD qu'il faut pour achetehr 1eth.\r\n    //....We could make this public, but then we'd have to deploy it\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // // Rinkeby ETH / USD Address\r\n        // // https://docs.chain.link/docs/ethereum-addresses/\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        // );\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData(); //answer= priceOfETHIntermsofUSD\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    // function getPriceEuroToUsd(AggregatorV3Interface priceFeedEuroToUsd)\r\n    //     internal\r\n    //     view\r\n    //     returns (uint256)\r\n    // {\r\n    //     // // il nous faut l'adresse Rinkeby de l'équivalence EUR / USD\r\n    //     // // https://docs.chain.link/docs/ethereum-addresses/\r\n    //     // //https://rinkeby.etherscan.io/address/0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F\r\n    //     // AggregatorV3Interface priceFeedEuroToUsd = AggregatorV3Interface(\r\n    //     //     0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F\r\n    //     // );\r\n    //     (, int256 answer, , , ) = priceFeedEuroToUsd.latestRoundData();\r\n    //     return uint256(answer);\r\n    // }\r\n\r\n    // 1000000000\r\n    // Pass some ETH Amount and at the other side how much that Eth amount is worth in terms of USD\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed); //ethprice (en $USD )::  le nombre de $USD qu il faut pour acheter 1 eth.\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //ethAmountInUsd (en Eth)::  le nombre de $USD qu'il faut donc pour le nombre de ETH apportés pour participer (msg.value)\r\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd; //$USD\r\n    }\r\n\r\n    // function getConversionRateInEuro(\r\n    //     uint256 ethAmountEuro,\r\n    //     AggregatorV3Interface priceFeedEuroToUsd\r\n    // ) internal view returns (uint256) {\r\n    //     uint256 ethPriceInEuro = getPriceEuroToUsd(priceFeedEuroToUsd);\r\n    //     uint256 ethAmountInEuro = (ethPriceInEuro * ethAmountEuro) /\r\n    //         1000000000000000000;\r\n    //     // ci dessous la conversion actuelle entre ETH/EUR après ajustement des zéros\r\n    //     return ethAmountInEuro;\r\n    // }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}